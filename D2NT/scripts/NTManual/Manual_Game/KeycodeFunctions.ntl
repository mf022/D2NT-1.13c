// NTManualGame functions

function StackedRes()
{
	Print(COLOR_1 + "Fire: " + Resi[0] + COLOR_4 + " - " + COLOR_3 + "Cold: " + Resi[1] + COLOR_4 + " - " + COLOR_9 + "Light: " + Resi[2] + COLOR_4 + " - " + COLOR_2 + "Poison: " + Resi[3]);
}

function FCRPlusPrint()
{
	Print(COLOR_4 + "FCR(" + COLOR_1 + me.GetStat(105) + COLOR_4 + ") FHR(" + COLOR_1 + me.GetStat(99) + COLOR_4 + ") IAS(" + COLOR_1 + me.GetStat(93) + COLOR_4 + ") %DR(" + COLOR_1 + me.GetStat(36) + COLOR_4 + ") %MDR(" + COLOR_1 + me.GetStat(37) + COLOR_4 + ")");
}

function SorbPrint()
{
	Print(COLOR_4 + "Absorbs: " + COLOR_1 + "Fire " + me.GetStat(143) + COLOR_4 + "(" + COLOR_1 + me.GetStat(142) +
		  COLOR_4 + "%) " + COLOR_9 + "Light " + me.GetStat(145) + COLOR_4 + "(" + COLOR_9 + me.GetStat(144) +
		  COLOR_4 + "%) " + COLOR_0 + "Magic " + me.GetStat(147) + COLOR_4 + "(" + COLOR_0 + me.GetStat(146) +
		  COLOR_4 + "%) " + COLOR_3 + "Cold "  + me.GetStat(149) + COLOR_4 + "(" + COLOR_3 + me.GetStat(148) + COLOR_4 + "%)");
}

function Do_KeyHotList()
{
	var MercOnOrNo = (!NTConfig_MercStats) ? "" : " (+Merc)";

	var HotKeys = COLOR_8 + "Manual Game HotKeys" + ";";
	HotKeys += COLOR_1 + "---------------------------------------------------" + "\n";
	if (MGConfig_PickItems && !MGConfig_PickAuto) HotKeys += COLOR_2 + "[" + WhichHotKey(Key_PickItems) + "]" + COLOR_4 + " commence item picking!" + "\n";
	HotKeys += COLOR_2 + "[" + WhichHotKey(Key_HotKeyInfo) + "]" + COLOR_4 + " Send a list of hotkeys to your manager" + "\n";
	HotKeys += COLOR_2 + "[" + WhichHotKey(Key_ExitGame) + "]" + COLOR_4 + " Exit game with game stats like the normal bot does" + "\n";
	HotKeys += COLOR_2 + "[" + WhichHotKey(Key_GoToTown) + "]" + COLOR_4 + " teleports you to town" + "\n";
	HotKeys += COLOR_2 + "[" + WhichHotKey(Key_DoPrecast) + "]" + COLOR_4 + " Precast your skills" + "\n";
	HotKeys += COLOR_2 + "[" + WhichHotKey(Key_HiddenStats) + "]" + COLOR_4 + " Resistances, FCR, FHR, IAS, %DR, %MDR, and absorbs!" + "\n";
	HotKeys += COLOR_2 + "[" + WhichHotKey(Key_Breakpoints) + "]" + COLOR_4 + " Get your BPs for your character class" + "\n";
	HotKeys += COLOR_2 + "[" + WhichHotKey(Key_MyChicken) + "]" + COLOR_4 + " Print your chicken values for HP/MP" + "\n";
	HotKeys += COLOR_2 + "[" + WhichHotKey(Key_NextWaypoint) + "]" + COLOR_4 + " Auto-tele to the next waypoint!" + "\n";
	HotKeys += COLOR_2 + "[" + WhichHotKey(Key_POI) + "]" + COLOR_4 + " Auto-tele to the next point of interest (POI)!" + "\n";
	HotKeys += COLOR_2 + "[" + WhichHotKey(Key_InvStashCheck) + "]" + COLOR_4 + " Stairbuilders Inventory/Stash layout checker!" + "\n";
	HotKeys += COLOR_2 + "[" + WhichHotKey(Key_GameStats) + "]" + COLOR_4 + " Log your current game's stats to manager" + "\n";
	HotKeys += COLOR_2 + "[" + WhichHotKey(Key_CharStats) + "]" + COLOR_4 + " Log your extended stats to manager" + MercOnOrNo + "\n";
	HotKeys += COLOR_2 + "[" + WhichHotKey(Key_AntiIdle) + "]" + COLOR_4 + " Turn on AntiIdle for extended AFK's" + "\n";
	HotKeys += COLOR_1 + "---------------------------------------------------";
	MG_LogToOOG(NTC_LOG_COMMON, HotKeys);
}

function HeadingHome()
{
	if (me.areaid >= 2 && me.areaid <= 39) {
		NTTM_CheckAct(1);
	}
	else if (me.areaid >= 40 && me.areaid <= 74) {
		NTTM_CheckAct(2);
	}
	else if (me.areaid >= 75 && me.areaid <= 102) {
		NTTM_CheckAct(3);
	}
	else if (me.areaid >= 103 && me.areaid <= 108) {
		NTTM_CheckAct(4);
	}
	else if (me.areaid >= 109) {
		NTTM_CheckAct(5);
	}
}

function MG_CheckFreeInventorySpace(PrintToScreen) {
	var i, x, y;
	var itemsInventory;

	if (arguments.length == 0) { PrintToScreen = false; }
	else { PrintToScreen = true; }

	var inventorySpace = new Array(4);

	for(y = 0 ; y < 4 ; y++) {
		inventorySpace[y] = new Array(10);
	}
	for(y = 0 ; y < 4 ; y++) {
		for(x = 0 ; x < 10 ; x++) {
			inventorySpace[y][x] = 0;
		}
	}

	itemsInventory = me.GetItems();

	if (!itemsInventory) {
		return false;
	}
	var totalUsedSpace = 0;
	for(i = 0 ; i < itemsInventory.length ; i++) {
		if (itemsInventory[i].mode == 0 && itemsInventory[i].itemloc == 0) {
			if (itemsInventory[i].classid == 605 && itemsInventory[i].quality == 7) { // id's where gheeds is
				for(y = 0 ; y < itemsInventory[i].ysize ; y++) {
					for(x = 0 ; x < itemsInventory[i].xsize ; x++)
						inventorySpace[y+itemsInventory[i].y][x+itemsInventory[i].x] = 5;
						totalUsedSpace++;
				}
			}
			else if (itemsInventory[i].classid == 603 && itemsInventory[i].quality == 7) { // id's where the anni is
				for(y = 0 ; y < itemsInventory[i].ysize ; y++) {
					for(x = 0 ; x < itemsInventory[i].xsize ; x++)
						inventorySpace[y+itemsInventory[i].y][x+itemsInventory[i].x] = 4;
						totalUsedSpace++;
				}
			}
			else if (itemsInventory[i].classid == 604 && itemsInventory[i].quality == 7) { // id's where the torch is
				for(y = 0 ; y < itemsInventory[i].ysize ; y++) {
					for(x = 0 ; x < itemsInventory[i].xsize ; x++)
						inventorySpace[y+itemsInventory[i].y][x+itemsInventory[i].x] = 3;
						totalUsedSpace++;
				}
			}
			else if (itemsInventory[i].classid == 549) { // id's where the cube is
				for(y = 0 ; y < itemsInventory[i].ysize ; y++) {
					for(x = 0 ; x < itemsInventory[i].xsize ; x++)
						inventorySpace[y+itemsInventory[i].y][x+itemsInventory[i].x] = 2;
						totalUsedSpace++;
				}
			}
			else { // this will be unlocked full
				for(y = 0 ; y < itemsInventory[i].ysize ; y++) {
					for(x = 0 ; x < itemsInventory[i].xsize ; x++)
						inventorySpace[y+itemsInventory[i].y][x+itemsInventory[i].x] = 1;
						totalUsedSpace++;
				}
			}
		}
	}
	var totalFreeSpace = 40 - totalUsedSpace;
		var InvMangPrint = "";
	if (PrintToScreen) {
		if (InvChecking == "Game") Print(" ");
		if (InvChecking == "Game") Print(COLOR_8 + "INVENTORY: ");
			InvMangPrint += COLOR_8 + "Space Check -" + COLOR_5 + " Inventory" + ";";
			InvMangPrint += COLOR_1 + "--------------------------------------" + "\n";
			InvMangPrint += COLOR_4 + "Spaces: Free (" + COLOR_8 + totalFreeSpace + COLOR_4 + ") Used (" + COLOR_8 + totalUsedSpace + COLOR_4 + ")" + "\n";
		for(y = 0 ; y < 4 ; y++) {
			var printSpace = [];
			for(x = 0 ; x < 10 ; x++) {
				switch(inventorySpace[y][x]) {
					case 0: // unlocked empty
						printSpace.push(COLOR_2 + "O")
						break;
					case 1: // unlocked full
						printSpace.push(COLOR_1 + "X")
						break;
					case 2: // where the cube is
						printSpace.push(COLOR_4 + "C")
						break;
					case 3: // where the torch is
						printSpace.push(COLOR_4 + "T")
						break;
					case 4: // where the anni is
						printSpace.push(COLOR_4 + "A")
						break;
					case 5: // where Gheeds is
						printSpace.push(COLOR_4 + "G")
						break;
				}
			}
			if (InvChecking == "Game") Print(COLOR_4 + "|" + printSpace + COLOR_4 + "|");
			InvMangPrint += COLOR_4 + "|" + printSpace + COLOR_4 + "|" + "\n";
		}
		if (InvChecking == "Game") Print(COLOR_8 + "Free Space = " + totalFreeSpace + ", Used Space = " + totalUsedSpace);
		InvMangPrint += COLOR_8 + "Inventory Gold: " + COLOR_4 + InvGold + "\n";
		InvMangPrint += COLOR_1 + "--------------------------------------";
		if (InvChecking == "Mgr") {
			Print(COLOR_4 + "Inventory check sent to Manager CommonLog!");
			MG_LogToOOG(NTC_LOG_COMMON, InvMangPrint);
		}
	}
	return totalFreeSpace;
}

var StashGold = addSeparatorsNF(me.GetStat(15), ",", ".", ",");
var InvGold = addSeparatorsNF(me.GetStat(14), ",", ".", ",");

function MG_CheckFreeStashSpace(PrintToScreen) {

	var i, x, y;
	var itemsStash;
	var StashHeight = (me.gametype == 0) ? 4 : 8;

	if (arguments.length == 0) { PrintToScreen = false; }
	else { PrintToScreen = true; }

	var _stashspace = new Array(StashHeight);
	for(y = 0 ; y < StashHeight ; y++) {
		_stashspace[y] = new Array(6);
	}

	for(y = 0 ; y < StashHeight ; y++) {
		for(x = 0 ; x < 6 ; x++) {
			_stashspace[y][x] = 0;
		}
	}

	itemsStash = me.GetItems();

	if (!itemsStash) {
		return false;
	}
	var totalUsedSpace = 0;
	for(i = 0 ; i < itemsStash.length ; i++) {
		if (itemsStash[i].mode == 0 && itemsStash[i].itemloc == 4) {
			if (itemsStash[i].classid == 549) { // id's where the cube is
				for(y = 0 ; y < itemsStash[i].ysize ; y++) {
					for(x = 0 ; x < itemsStash[i].xsize ; x++) {
						_stashspace[y+itemsStash[i].y][x+itemsStash[i].x] = 2;
						totalUsedSpace++
					}
				}
			} else {
				for(y = 0 ; y < itemsStash[i].ysize ; y++) {
					for(x = 0 ; x < itemsStash[i].xsize ; x++) {
						_stashspace[y+itemsStash[i].y][x+itemsStash[i].x] = 1;
						totalUsedSpace++
					}
				}
			}
		}
	}
	var totalFreeSpace = (48 - totalUsedSpace);
	var StashMangPrint = "";
	if (PrintToScreen) {
		if (StashChecking == "Game") Print(COLOR_8 + "STASH: ");
		StashMangPrint += COLOR_8 + "Space Check - " + COLOR_5 + "Stash" + ";";
		StashMangPrint += COLOR_1 + "--------------------------------------" + "\n";
		StashMangPrint += COLOR_4 + "Spaces: Free (" + COLOR_8 + totalFreeSpace + COLOR_4 + ") Used (" + COLOR_8 + totalUsedSpace + COLOR_4 + ")" + "\n";
		for(y = 0 ; y < StashHeight ; y++) {
			var printSpace = [];
			for(x = 0 ; x < 6 ; x++) {
				switch(_stashspace[y][x]) {
					case 0:
						printSpace.push(COLOR_2 + "O")
						break;
					case 1:
						printSpace.push(COLOR_1 + "X")
						break;
					case 2:
						printSpace.push(COLOR_4 + "C")
						break;
				}
			}
			if (StashChecking == "Game") Print(COLOR_4 + "|" + printSpace + COLOR_4 + "|");
			StashMangPrint += COLOR_4 + "|" + printSpace + COLOR_4 + "|" + "\n";
		}
		if (StashChecking == "Game") Print(COLOR_8 + "Free Space = " + totalFreeSpace + ", Used Space = " + totalUsedSpace);
		StashMangPrint += COLOR_8 + "Stash Gold: " + COLOR_4 + StashGold + "\n";
		StashMangPrint += COLOR_1 + "--------------------------------------";
		if (StashChecking == "Mgr") {
			Print(COLOR_4 + "Stash check sent to Manager CommonLog!");
			MG_LogToOOG(NTC_LOG_COMMON, StashMangPrint);
		}
	}
	return totalFreeSpace;
}

function MG_AntiIdle() {
	while (me.areaid != 0 && MGAntiIdle) {
		var loc, randloc, prevloc,
			randloc = prevloc = " ";

		switch(me.act) {
		case 1:
			if (me.GetQuest(4, 0)) {
				loc = ["akara", "cain", "charsi", "gheed", "kashya", "portalspot", "stash", "waypoint", "warriv"];
			} else {
				loc = ["akara", "charsi", "gheed", "kashya", "portalspot", "stash", "waypoint", "warriv"];
			}

			break;
		case 2:
			loc = ["atma", "cain", "fara", "elzix", "drognan", "greiz", "jerhyn", "lysander", "meshif", "portalspot", "stash", "waypoint", "warriv"];

			break;
		case 3:
			loc = ["alkor", "asheara", "hratli", "meshif", "ormus", "portalspot", "stash", "waypoint"];

			break;
		case 4:
			loc = ["cain", "halbu", "jamella", "portalspot", "stash", "tyrael", "waypoint"];

			break;
		case 5:
			if (me.GetQuest(37, 0)) {
				loc = ["anya", "cain", "larzuk", "malah", "portalspot", "qual-kehk", "stash", "waypoint"];
			} else {
				loc = ["cain", "larzuk", "malah", "nihlathak", "portalspot", "qual-kehk", "stash", "waypoint"];
			}

			break;
		}

		while(true) {
			Delay(Random(1500000, 1750000));

			while (randloc === prevloc) {
				randloc = loc[Math.floor(Math.random() * loc.length)];
			}

			NTTM_TownMove(randloc);
			prevloc = randloc;
			Delay(Random(1500000, 1750000));
		}
	}
}